#name: Connect to an AWS role from a GitHub repository
name: Terraform + GitHub Actions ECS Integration

on:
  workflow_dispatch:

env:
  ENVIRONMENT: development
  AWS_REGION: ap-southeast-4
  ECR_REPOSITORY: 450356697252.dkr.ecr.ap-southeast-4.amazonaws.com/ogcapi
  ECS_SERVICE: ogcapi-java-service
  ECS_CLUSTER: shared-ecs
  ECS_TASK_DEFINITION: ./ogcapi-java-dev-td.json
  CONTAINER_NAME: ogcapi-java-container
  ROLE_ARN: arn:aws:iam::450356697252:role/TempGithubActionsRole
  ROLE_EXEC: arn:aws:iam::450356697252:role/nginx-fgate-ecs-agent-role
  ROLE_TASK: arn:aws:iam::450356697252:role/nginx-fgate-ecs-container-role
  HOST: http://localhost
  PORT: 8080
  ELASTIC_URL: https:/0.0.0.0/
  ELASTIC_KEY: 1234567890
  name: development

permissions:
  id-token: write   # JWT
  contents: read    # actions/checkout

jobs:
  AWS-ECR-ECS-Deploy:
    runs-on: ubuntu-latest
    environment: development
    steps:

      - name: Git clone the repository
        uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ env.ROLE_ARN }}
          role-session-name: GitHub_to_AWS_OIDC
          aws-region: ${{ env.AWS_REGION }}

      # Hello from AWS: WhoAmI
      - name: Sts GetCallerIdentity
        run: |
          aws sts get-caller-identity

      - name: Install jq
        run: sudo apt-get update && sudo apt-get install -y jq

      - name: Prepare
        id: prep
        run: |
          BRANCH=${GITHUB_REF##*/}
          TS=$(date +%s)
          REVISION=${GITHUB_SHA::8}
          BUILD_ID="${BRANCH}-${REVISION}-${TS}"
          LATEST_ID=canary
          if [[ $GITHUB_REF == refs/tags/* ]]; then
            BUILD_ID=${GITHUB_REF/refs\/tags\//}
            LATEST_ID=latest
          fi
          echo ::set-output name=BUILD_DATE::$(date -u +'%Y-%m-%dT%H:%M:%SZ')
          echo ::set-output name=BUILD_ID::${BUILD_ID}
          echo ::set-output name=LATEST_ID::${LATEST_ID} >> $GITHUB_OUTPUT

      - name: Checkout
        uses: actions/checkout@v3

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '17'
          cache: 'maven'

      - name: Build with Maven
        run: mvn -B package --file pom.xml

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build and tag image
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: ${{ env.ECR_REPOSITORY }}
          IMAGE_TAG: ${{ steps.prep.outputs.BUILD_ID }}
          LATEST_ID: ${{ steps.prep.outputs.LATEST_ID }}
        run: |
          # Build a docker container and
          # be deployed to ECS.
          # docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          # echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT
          # aws ecr get-login-password --region ap-southeast-2 | docker login --username AWS --password-stdin $ACCOUNT_ID
          docker build -t $ECR_REPOSITORY:$IMAGE_TAG .
          echo "image=$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT

      - name: Push image to Amazon ECR
        id: push-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: ${{ env.ECR_REPOSITORY }}
          IMAGE_TAG: ${{ steps.prep.outputs.BUILD_ID }}
          LATEST_ID: ${{ steps.prep.outputs.LATEST_ID }}
        run: |
          # Build a docker container and
          # be deployed to ECS.
          # docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          # echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT
          # aws ecr get-login-password --region ap-southeast-2 | docker login --username AWS --password-stdin $ACCOUNT_ID
          docker push $ECR_REPOSITORY:$IMAGE_TAG
          echo "image=$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT

      - name: Render ECS task definition
        id: task-def
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: ${{ env.ECS_TASK_DEFINITION }}
          container-name: ${{ env.CONTAINER_NAME }}
          image: ${{ steps.push-image.outputs.image }}
          environment-variables: |
            ENVIRONMENT=${{ env.ENVIRONMENT }}
            HOST=${{ env.HOST }}
            PORT=${{ env.PORT }}
            ELASTIC_URL=${{ env.ELASTIC_URL }}
            ELASTIC_KEY=${{ env.ELASTIC_KEY }}
            IMAGE=${{ steps.push-image.outputs.image }}

#     - name: Deploy Amazon ECS task definition
#       uses: aws-actions/amazon-ecs-deploy-task-definition@v1
#       with:
#         task-definition: ${{ steps.task-def.outputs.task-definition }}
#         service: ${{ env.ECS_SERVICE }}
#         cluster: ${{ env.ECS_CLUSTER }}
#         wait-for-service-stability: true
