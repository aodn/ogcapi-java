name: Terraform + GitHub Actions ECS Integration

on:
  workflow_dispatch:

env:
  ENVIRONMENT: tfintegration
  ECS_TASK_DEFINITION: ./ogcapi-java-dev-td.json
  CONTAINER_NAME: ogcapi-java-container
  HOST: http://localhost
  PORT: 8082

permissions:
  id-token: write   # JWT
  contents: read    # actions/checkout

jobs:
  AWS-ECR-ECS-Deploy:
    runs-on: ubuntu-latest
    environment: tfintegration
    steps:

      - name: Git clone the repository
        uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ vars.ROLE_ARN }}
          role-session-name: GitHub_to_AWS_OIDC
          aws-region: ${{ vars.AWS_REGION }}

      # Hello from AWS: WhoAmI
      - name: Sts GetCallerIdentity
        run: |
          aws sts get-caller-identity

      - name: Install jq
        run: sudo apt-get update && sudo apt-get install -y jq

      - name: Prepare
        id: prep
        run: |
          BRANCH=${GITHUB_REF##*/}
          TS=$(date +%s)
          REVISION=${GITHUB_SHA::8}
          BUILD_ID="${BRANCH}-${REVISION}-${TS}"
          LATEST_ID=canary
          if [[ $GITHUB_REF == refs/tags/* ]]; then
            BUILD_ID=${GITHUB_REF/refs\/tags\//}
            LATEST_ID=latest
          fi
          echo ::set-output name=BUILD_DATE::$(date -u +'%Y-%m-%dT%H:%M:%SZ')
          echo ::set-output name=BUILD_ID::${BUILD_ID}
          echo ::set-output name=LATEST_ID::${LATEST_ID} >> $GITHUB_OUTPUT

      - name: Checkout
        uses: actions/checkout@v3

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '17'
          cache: 'maven'

      - name: Build with Maven
        run: mvn -B package --file pom.xml

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build and tag image
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: ${{ vars.ECR_REPOSITORY }}
          IMAGE_TAG: ${{ steps.prep.outputs.BUILD_ID }}
          LATEST_ID: ${{ steps.prep.outputs.LATEST_ID }}
        run: |
          docker build -t $ECR_REPOSITORY:$IMAGE_TAG .
          echo "image=$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT

      - name: Push image to Amazon ECR
        id: push-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: ${{ vars.ECR_REPOSITORY }}
          IMAGE_TAG: ${{ steps.prep.outputs.BUILD_ID }}
          LATEST_ID: ${{ steps.prep.outputs.LATEST_ID }}
        run: |
          docker push $ECR_REPOSITORY:$IMAGE_TAG
          echo "image=$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT

#     - name: Print select github deployment parameters
#       run: |
#         echo "ENVIRONMENT:  ${{ env.ENVIRONMENT }}"
#         echo "ROLE_EXEC:    ${{ vars.ROLE_EXEC }}"
#         echo "ROLE_TASK:    ${{ vars.ROLE_TASK }}"
#
      - name: Render ECS task definition
        id: task-def
        env:
          ROLE_EXEC: ${{ vars.ROLE_EXEC }}
          ROLE_TASK: ${{ vars.ROLE_TASK }}
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: ${{ env.ECS_TASK_DEFINITION }}
          container-name: ${{ env.CONTAINER_NAME }}
          image: ${{ steps.push-image.outputs.image }}
          environment-variables: |
            ENVIRONMENT=${{ env.ENVIRONMENT }}
            HOST=${{ env.HOST }}
            PORT=${{ env.PORT }}
            ELASTIC_URL=${{ vars.ELASTIC_URL }}
            ELASTIC_KEY=${{ vars.ELASTIC_KEY }}
            IMAGE=${{ steps.push-image.outputs.image }}

      - name: Deploy Amazon ECS task definition
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: ${{ steps.task-def.outputs.task-definition }}
          service: ${{ vars.ECS_SERVICE }}
          cluster: ${{ vars.ECS_CLUSTER }}
#         wait-for-service-stability: true
